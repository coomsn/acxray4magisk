#!/system/bin/sh
clear; cd "${0%/*}"

# define color
normal=$(printf '\033[0m'); green=$(printf '\033[0;32m'); red=$(printf '\033[91m')

# environment variables
export PATH="/data/adb/magisk:/data/adb/ksu/bin:$PATH:/system/bin"
source ${0%/*}/settings.ini

# Function to filter UIDs based on package names
uid_filter() {
  [ -f "uids.list" ] && rm "uids.list"
  uid=""; uids=""
  for package_name in ${package_list[@]}; do
    uid=$(busybox awk -v package="${package_name}" '$1 ~ package {print $2}' /data/system/packages.list)
    [ -n "${uid}" ] && uids+=("${uid}")
    echo "${package_name}: ${uid}" >> ${0%/*}/uids.list
  done
}

# Function to start the proxy
start_proxy() {
  if [ -f "${Bin}" ]; then
    chmod 755 ${Bin} || { echo "Failed to set permissions on ${Bin}"; exit 1; }
    chown root:net_admin ${Bin} || { echo "Failed to change owner of ${Bin}"; exit 1; }
    uid_filter
    executeProxyRules
    executeDisable_QUIC
    ulimit -SHn 1000000
    [[ "${Bin##*/}" == "xray" ]] && nohup busybox setuidgid ${box_user}:${box_group} ${Bin} run -confdir ${config_dir} > /dev/null 2>&1 &
    [[ "${Bin##*/}" == "sing-box" ]] && nohup busybox setuidgid ${box_user}:${box_group} ${Bin} run -c ${config_file} -D ./binary/ > /dev/null 2>&1 &
  else
    echo "Binary ${Bin} not found"
    exit 1
  fi
  create_task
}

# Function to stop the proxy
stop_proxy() {
  delete_task
  PID=$(pidof ${Bin})
  pidof ${Bin} > /dev/null 2>&1 && kill -15 ${PID} > /dev/null 2>&1
  executeDeleteProxyRules > /dev/null 2>&1
  deleteDisable_QUIC
  rm ${0%/*}/*.list
  rm ${0%/*}/logs/*.log
}

# Function to create TPROXY rules
createProxyRules() {
  # Create routes and rules
  ${1} rule add fwmark "${fwmark}" table ${2}  pref $(expr ${2} \* 10)
  ${1} route add local default dev lo table ${2}
  # Create custom chain
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  # Create external custom chain rules
  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} ! -p udp -j RETURN
  done

  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

if [ "${ap_list}" != "" ]; then
  for ap in ${ap_list[@]} ; do
    ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
    ${3} -t mangle -A ${4}_EXTERNAL -p udp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
  done
fi  

  ${3} -t mangle -A ${4}_EXTERNAL -m socket -j RETURN

  # Create internal custom chain rules
  ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN
  ${3} -t mangle -A ${4}_LOCAL -p tcp -m mark --mark ${fwmark} -j RETURN
  ${3} -t mangle -A ${4}_LOCAL -p udp -m mark --mark ${fwmark} -j RETURN
  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} ! -p udp -j RETURN
  done
  if [[ "${list_mode}" == "blacklist" ]] ; then
    for appid in ${6}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j RETURN
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
    done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
  fi
  if [[ "${list_mode}" == "whitelist" ]] ; then
    for appid in ${6}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
    done
    if [ -n "${AIDs}" ]; then
      for AID in ${AIDs[*]}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
      done
    else
        echo "Variable is empty"
    fi
  ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j MARK --set-mark ${fwmark}
  fi
  # Referencing custom chains
  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
  if [ ${list_switch} = true ]; then
    local list_name=$(echo ${3} | busybox awk '{print $1}')
    ${3} -t mangle -L -nv > ${0%/*}/${list_name}_mangle_rules.list
  fi
}

# Function to execute proxy rules
executeProxyRules() {
  createProxyRules ip "${table}" "${IPV}" "${Bin##*/}" "${intranet[*]}" "${uids[*]}"
  if [ "${ip6tables_switch}" = true ]; then
    createProxyRules "ip -6" "$(expr ${table} \* 2)" "${IP6V}" "${Bin##*/}6" "${intranet6[*]}" "${uids[*]}"
  fi
}

# Function to delete proxy rules
deleteProxyRules() {
  ${1} rule del fwmark "${fwmark}" table ${2} pref $(expr ${2} \* 10)
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  # First, delete the reference chain, otherwise the custom chain cannot be deleted.
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  # Secondly, delete the custom rules of the custom chain.
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_LOCAL
  # Finally, delete the custom chain.
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X ${4}_LOCAL
}

# Function to execute delete proxy rules
executeDeleteProxyRules() {
  deleteProxyRules ip "${table}" "${IPV}" "${Bin##*/}"
  if [ "${ip6tables_switch}" = true ]; then
    deleteProxyRules "ip -6" "$(expr ${table} \* 2)" "${IP6V}" "${Bin##*/}6"
  fi
}

# Function to create task
create_task() {
  crontab_file="${0%/*}/root"
  if pgrep busybox crond > /dev/null; then
    kill -9 $(pgrep busybox crond)
  fi
  echo '0 */12 * * * touch /data/adb/modules/xray-module/disable && sleep 3 && rm /data/adb/modules/xray-module/disable' > ${crontab_file}
  nohup busybox crond -c ${0%/*}/ > /dev/null 2>&1 &
  echo -e "${green}New task:\n$(busybox crontab -l -c ${0%/*}/)${normal}"
}

# Function to delete task
delete_task() {
  if pgrep busybox crond > /dev/null; then
    kill -9 $(pgrep busybox crond)
    rm ${0%/*}/root > /dev/null 2>&1
  fi
}

# Function to run proxy
run_proxy() {
  stop_proxy > /dev/null 2>&1
  start_proxy
}

# Function to get local IP
net_ip() {
  local_ip=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if ($i=="src") {print $(i+1); break}}') && echo "${local_ip}"
}

# Function to get network ID
net_id() {
  # get wifi ssid
  ssid=$(iw dev wlan0 link | grep -i ssid | awk '{for(i=1;i<=NF;i++) if ($i=="SSID:") {print $(i+1); break}}')
  [ -z "$ssid" ] && echo "mobile" || echo "${ssid}"
}

# disable / enable quic using iptables rules 
quic="disable"

  # Disable QUIC
Disable_QUIC() {
  if [ "${quic}" = "disable" ]; then
    ${1} ${2} OUTPUT -p udp --dport 443 -j REJECT
    ${1} ${2} OUTPUT -p udp --dport 80 -j REJECT
  fi
}

executeDisable_QUIC() {
  Disable_QUIC "${IPV}" "-A"
  Disable_QUIC "${IP6V}" "-A"
}

deleteDisable_QUIC() {
  Disable_QUIC "${IPV}" "-D"
  Disable_QUIC "${IP6V}" "-D"
}






















